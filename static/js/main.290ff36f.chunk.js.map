{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","placeholder","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","for","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","toLowerCase","trim","console","log","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","msg","defaultProps","aboutText","App","setMode","setAlert","showAlert","message","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.290ff36f.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form>\r\n\r\n          <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n            <label className =\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'set title here',\r\n  aboutText: 'About',\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const handleClearClick = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n    }\r\n\r\n    const handleSpaces = () => {\r\n        let newText = text.trim();\r\n        setText(newText);\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        console.log('i am copying');\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h1>{props.heading} </h1>\r\n                <div className=\"mb-3\"  >\r\n                    <label for=\"myBox\" className=\"form-label\"></label>\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'light' ? 'white' : 'grey', color: props.mode === 'dark' ? 'white' : 'black' }} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary my-1\" onClick={handleUpClick}>Convert to uppercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to lowercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleSpaces}>Convert spaces</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>remove extra spaces</button>\r\n\r\n\r\n\r\n\r\n            </div>\r\n            <div className=\"container my-2\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h2>Your text summary</h2>\r\n                <p> {text.split(\"\").length} words and {text.length} characters</p>\r\n                <p> {0.008 * text.split(\"\").length} minutes to read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter something to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","\r\nimport React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        \r\n           props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize[props.alert.type]}</strong>:{props.alert.msg}\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n\r\n        \r\n    )\r\n}\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert,setAlert]= useState('null');\n\n  const showAlert =(message,type) =>{\n    setAlert({\n       msg: message,\n       type:type,\n      })\n  }\n\n  const toggleMode=() =>{\n     if(mode === 'light'){\n     setMode('dark');\n     document.body.style.backgroundColor ='grey';\n     showAlert(\"Dark mode on\" , \"success\");\n    }\n  \n    else {\n     document.body.style.backgroundColor = 'white';\n     setMode('light');\n     showAlert(\"Light mode on\" , \"success\");\n    }\n  } \n\n  return (\n     <> \n        \n        <Navbar title=\"Textutils\" mode={mode}  toggleMode={toggleMode}/>  \n        <Alert  alert={alert}/>\n\n        <div className=\"container\">\n        <TextForm  heading=\"Plz enter text here\"  mode={mode}/>\n        </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}